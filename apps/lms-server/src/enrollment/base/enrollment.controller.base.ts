/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnrollmentService } from "../enrollment.service";
import { EnrollmentCreateInput } from "./EnrollmentCreateInput";
import { Enrollment } from "./Enrollment";
import { EnrollmentFindManyArgs } from "./EnrollmentFindManyArgs";
import { EnrollmentWhereUniqueInput } from "./EnrollmentWhereUniqueInput";
import { EnrollmentUpdateInput } from "./EnrollmentUpdateInput";

export class EnrollmentControllerBase {
  constructor(protected readonly service: EnrollmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Enrollment })
  async createEnrollment(
    @common.Body() data: EnrollmentCreateInput
  ): Promise<Enrollment> {
    return await this.service.createEnrollment({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,

        course: data.course
          ? {
              connect: data.course,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enrollmentDate: true,

        user: {
          select: {
            id: true,
          },
        },

        course: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Enrollment] })
  @ApiNestedQuery(EnrollmentFindManyArgs)
  async enrollments(@common.Req() request: Request): Promise<Enrollment[]> {
    const args = plainToClass(EnrollmentFindManyArgs, request.query);
    return this.service.enrollments({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enrollmentDate: true,

        user: {
          select: {
            id: true,
          },
        },

        course: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Enrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async enrollment(
    @common.Param() params: EnrollmentWhereUniqueInput
  ): Promise<Enrollment | null> {
    const result = await this.service.enrollment({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        enrollmentDate: true,

        user: {
          select: {
            id: true,
          },
        },

        course: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Enrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEnrollment(
    @common.Param() params: EnrollmentWhereUniqueInput,
    @common.Body() data: EnrollmentUpdateInput
  ): Promise<Enrollment | null> {
    try {
      return await this.service.updateEnrollment({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,

          course: data.course
            ? {
                connect: data.course,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          enrollmentDate: true,

          user: {
            select: {
              id: true,
            },
          },

          course: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Enrollment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEnrollment(
    @common.Param() params: EnrollmentWhereUniqueInput
  ): Promise<Enrollment | null> {
    try {
      return await this.service.deleteEnrollment({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          enrollmentDate: true,

          user: {
            select: {
              id: true,
            },
          },

          course: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
